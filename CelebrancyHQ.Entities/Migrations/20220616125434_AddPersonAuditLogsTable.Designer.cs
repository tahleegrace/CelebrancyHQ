// <auto-generated />
using System;
using CelebrancyHQ.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CelebrancyHQ.Entities.Migrations
{
    [DbContext(typeof(CelebrancyHQContext))]
    [Migration("20220616125434_AddPersonAuditLogsTable")]
    partial class AddPersonAuditLogsTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CelebrancyHQ.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suburb")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("CelebrancyHQ.Entities.Auditing.CeremonyAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CeremonyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CeremonyId");

                    b.HasIndex("PersonId");

                    b.ToTable("CeremonyAuditLogs");
                });

            modelBuilder.Entity("CelebrancyHQ.Entities.Auditing.PersonAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("PersonAuditLogs");
                });

            modelBuilder.Entity("CelebrancyHQ.Entities.Ceremony", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CeremonyDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CeremonyTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CeremonyTypeId");

                    b.ToTable("Ceremonies");
                });

            modelBuilder.Entity("CelebrancyHQ.Entities.CeremonyAccessInvitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Accepted")
                        .HasColumnType("bit");

                    b.Property<int>("CeremonyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("UniqueCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CeremonyId");

                    b.HasIndex("PersonId");

                    b.ToTable("CeremonyAccessInvitations");
                });

            modelBuilder.Entity("CelebrancyHQ.Entities.CeremonyDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CeremonyId")
                        .HasColumnType("int");

                    b.Property<int>("CeremonyTypeDateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CeremonyId");

                    b.HasIndex("CeremonyTypeDateId");

                    b.ToTable("CeremonyDates");
                });

            modelBuilder.Entity("CelebrancyHQ.Entities.CeremonyParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CeremonyId")
                        .HasColumnType("int");

                    b.Property<int>("CeremonyTypeParticipantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CeremonyId");

                    b.HasIndex("CeremonyTypeParticipantId");

                    b.HasIndex("PersonId");

                    b.ToTable("CeremonyParticipants");
                });

            modelBuilder.Entity("CelebrancyHQ.Entities.CeremonyPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("CanEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEditWithApproval")
                        .HasColumnType("bit");

                    b.Property<bool>("CanView")
                        .HasColumnType("bit");

                    b.Property<bool>("CanViewHistory")
                        .HasColumnType("bit");

                    b.Property<int>("CeremonyId")
                        .HasColumnType("int");

                    b.Property<int>("CeremonyTypeParticipantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApprover")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CeremonyId");

                    b.HasIndex("CeremonyTypeParticipantId");

                    b.ToTable("CeremonyPermissions");
                });

            modelBuilder.Entity("CelebrancyHQ.Entities.CeremonyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("CeremonyTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "Marriage",
                            Created = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            Description = "A ceremony to celebrate the joining of two persons in marriage.",
                            Name = "Marriage Ceremony",
                            Updated = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            Code = "Funeral",
                            Created = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            Description = "A ceremony to celebrate the life of and remember a person who has recently passed way.",
                            Name = "Funeral Ceremony",
                            Updated = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("CelebrancyHQ.Entities.CeremonyTypeDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CeremonyTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CeremonyTypeId");

                    b.ToTable("CeremonyTypeDates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CeremonyTypeId = 1,
                            Code = "InitialPhoneCall",
                            Created = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            Name = "Initial phone call",
                            Updated = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CeremonyTypeId = 1,
                            Code = "InitialInterview",
                            Created = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            Name = "Initial interview",
                            Updated = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            CeremonyTypeId = 1,
                            Code = "Rehearsal",
                            Created = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            Name = "Rehearsal",
                            Updated = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            CeremonyTypeId = 1,
                            Code = "Ceremony",
                            Created = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            Name = "Ceremony",
                            Updated = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 5,
                            CeremonyTypeId = 1,
                            Code = "Reception",
                            Created = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            Name = "Reception",
                            Updated = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 6,
                            CeremonyTypeId = 1,
                            Code = "Other",
                            Created = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            Name = "Other",
                            Updated = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 7,
                            CeremonyTypeId = 2,
                            Code = "InitialPhoneCall",
                            Created = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            Name = "Initial phone call",
                            Updated = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 8,
                            CeremonyTypeId = 2,
                            Code = "InitialInterview",
                            Created = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            Name = "Initial interview",
                            Updated = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 9,
                            CeremonyTypeId = 2,
                            Code = "Rehearsal",
                            Created = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            Name = "Rehearsal",
                            Updated = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 10,
                            CeremonyTypeId = 2,
                            Code = "Ceremony",
                            Created = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            Name = "Ceremony",
                            Updated = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 11,
                            CeremonyTypeId = 2,
                            Code = "Wake",
                            Created = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            Name = "Wake",
                            Updated = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 12,
                            CeremonyTypeId = 2,
                            Code = "Other",
                            Created = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            Name = "Other",
                            Updated = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 13,
                            CeremonyTypeId = 2,
                            Code = "Death",
                            Created = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            Name = "Death",
                            Updated = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("CelebrancyHQ.Entities.CeremonyTypeParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CeremonyTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaximumNumberOfParticipants")
                        .HasColumnType("int");

                    b.Property<int?>("MinimumNumberOfParticipants")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CeremonyTypeId");

                    b.ToTable("CeremonyTypeParticipants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CeremonyTypeId = 1,
                            Code = "Celebrant",
                            Created = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            MaximumNumberOfParticipants = 1,
                            Name = "Celebrant",
                            Updated = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CeremonyTypeId = 2,
                            Code = "Celebrant",
                            Created = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            MaximumNumberOfParticipants = 1,
                            Name = "Celebrant",
                            Updated = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            CeremonyTypeId = 1,
                            Code = "Couple",
                            Created = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            MaximumNumberOfParticipants = 2,
                            Name = "Couple",
                            Updated = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            CeremonyTypeId = 1,
                            Code = "Organiser",
                            Created = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            Name = "Organiser",
                            Updated = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 5,
                            CeremonyTypeId = 2,
                            Code = "Organiser",
                            Created = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            Name = "Organiser",
                            Updated = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 6,
                            CeremonyTypeId = 1,
                            Code = "Witness",
                            Created = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            MaximumNumberOfParticipants = 2,
                            MinimumNumberOfParticipants = 2,
                            Name = "Witness",
                            Updated = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 7,
                            CeremonyTypeId = 1,
                            Code = "BridalParty",
                            Created = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            Name = "Bridal party",
                            Updated = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 8,
                            CeremonyTypeId = 1,
                            Code = "InvitedGuest",
                            Created = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            Name = "Invited guest",
                            Updated = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 9,
                            CeremonyTypeId = 2,
                            Code = "Deceased",
                            Created = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            MaximumNumberOfParticipants = 1,
                            Name = "Deceased person",
                            Updated = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 10,
                            CeremonyTypeId = 2,
                            Code = "InvitedGuest",
                            Created = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            Name = "Invited guest",
                            Updated = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 11,
                            CeremonyTypeId = 1,
                            Code = "Other",
                            Created = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            Name = "Other",
                            Updated = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 12,
                            CeremonyTypeId = 2,
                            Code = "Other",
                            Created = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            Name = "Other",
                            Updated = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 13,
                            CeremonyTypeId = 1,
                            Code = "Interpreter",
                            Created = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            MaximumNumberOfParticipants = 1,
                            Name = "Interpreter",
                            Updated = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 14,
                            CeremonyTypeId = 2,
                            Code = "Interpreter",
                            Created = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            MaximumNumberOfParticipants = 1,
                            Name = "Interpreter",
                            Updated = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 15,
                            CeremonyTypeId = 2,
                            Code = "FuneralDirector",
                            Created = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            Name = "Funeral director",
                            Updated = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("CelebrancyHQ.Entities.CeremonyVenue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CeremonyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CeremonyId");

                    b.HasIndex("OrganisationId");

                    b.ToTable("CeremonyVenues");
                });

            modelBuilder.Entity("CelebrancyHQ.Entities.Organisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Organisations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            EmailAddress = "info@celebrancyhq.co",
                            Name = "CelebrancyHQ",
                            Type = "Celebrant",
                            Updated = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            Website = "https://www.celebrancyhq.co"
                        });
                });

            modelBuilder.Entity("CelebrancyHQ.Entities.OrganisationPhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("OrganisationPhoneNumbers");
                });

            modelBuilder.Entity("CelebrancyHQ.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<string>("PreferredName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Registered")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Persons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            EmailAddress = "system.admin@celebrancyhq.co",
                            FirstName = "CelebrancyHQ",
                            Gender = "Other",
                            LastName = "System Administrator",
                            PreferredName = "System Administrator",
                            Registered = true,
                            Title = "Mx",
                            Updated = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("CelebrancyHQ.Entities.PersonPhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonPhoneNumbers");
                });

            modelBuilder.Entity("CelebrancyHQ.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            Deleted = false,
                            EmailAddress = "system.admin@celebrancyhq.co",
                            PasswordHash = "testpassword",
                            PasswordSalt = "passwordsalt",
                            PersonId = 0,
                            Updated = new DateTime(2022, 5, 8, 14, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("CelebrancyHQ.Entities.Auditing.CeremonyAuditLog", b =>
                {
                    b.HasOne("CelebrancyHQ.Entities.Ceremony", "Ceremony")
                        .WithMany()
                        .HasForeignKey("CeremonyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CelebrancyHQ.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ceremony");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("CelebrancyHQ.Entities.Auditing.PersonAuditLog", b =>
                {
                    b.HasOne("CelebrancyHQ.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CelebrancyHQ.Entities.Person", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CelebrancyHQ.Entities.Ceremony", b =>
                {
                    b.HasOne("CelebrancyHQ.Entities.CeremonyType", "CeremonyType")
                        .WithMany()
                        .HasForeignKey("CeremonyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CeremonyType");
                });

            modelBuilder.Entity("CelebrancyHQ.Entities.CeremonyAccessInvitation", b =>
                {
                    b.HasOne("CelebrancyHQ.Entities.Ceremony", "Ceremony")
                        .WithMany()
                        .HasForeignKey("CeremonyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CelebrancyHQ.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ceremony");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("CelebrancyHQ.Entities.CeremonyDate", b =>
                {
                    b.HasOne("CelebrancyHQ.Entities.Ceremony", "Ceremony")
                        .WithMany()
                        .HasForeignKey("CeremonyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CelebrancyHQ.Entities.CeremonyTypeDate", "CeremonyTypeDate")
                        .WithMany()
                        .HasForeignKey("CeremonyTypeDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ceremony");

                    b.Navigation("CeremonyTypeDate");
                });

            modelBuilder.Entity("CelebrancyHQ.Entities.CeremonyParticipant", b =>
                {
                    b.HasOne("CelebrancyHQ.Entities.Ceremony", "Ceremony")
                        .WithMany()
                        .HasForeignKey("CeremonyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CelebrancyHQ.Entities.CeremonyTypeParticipant", "CeremonyTypeParticipant")
                        .WithMany()
                        .HasForeignKey("CeremonyTypeParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CelebrancyHQ.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ceremony");

                    b.Navigation("CeremonyTypeParticipant");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("CelebrancyHQ.Entities.CeremonyPermission", b =>
                {
                    b.HasOne("CelebrancyHQ.Entities.Ceremony", "Ceremony")
                        .WithMany()
                        .HasForeignKey("CeremonyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CelebrancyHQ.Entities.CeremonyTypeParticipant", "CeremonyTypeParticipant")
                        .WithMany()
                        .HasForeignKey("CeremonyTypeParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ceremony");

                    b.Navigation("CeremonyTypeParticipant");
                });

            modelBuilder.Entity("CelebrancyHQ.Entities.CeremonyType", b =>
                {
                    b.HasOne("CelebrancyHQ.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("CelebrancyHQ.Entities.CeremonyTypeDate", b =>
                {
                    b.HasOne("CelebrancyHQ.Entities.CeremonyType", "CeremonyType")
                        .WithMany()
                        .HasForeignKey("CeremonyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CeremonyType");
                });

            modelBuilder.Entity("CelebrancyHQ.Entities.CeremonyTypeParticipant", b =>
                {
                    b.HasOne("CelebrancyHQ.Entities.CeremonyType", "CeremonyType")
                        .WithMany()
                        .HasForeignKey("CeremonyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CeremonyType");
                });

            modelBuilder.Entity("CelebrancyHQ.Entities.CeremonyVenue", b =>
                {
                    b.HasOne("CelebrancyHQ.Entities.Ceremony", "Ceremony")
                        .WithMany()
                        .HasForeignKey("CeremonyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CelebrancyHQ.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ceremony");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("CelebrancyHQ.Entities.Organisation", b =>
                {
                    b.HasOne("CelebrancyHQ.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("CelebrancyHQ.Entities.OrganisationPhoneNumber", b =>
                {
                    b.HasOne("CelebrancyHQ.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("CelebrancyHQ.Entities.Person", b =>
                {
                    b.HasOne("CelebrancyHQ.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("CelebrancyHQ.Entities.PersonPhoneNumber", b =>
                {
                    b.HasOne("CelebrancyHQ.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("CelebrancyHQ.Entities.User", b =>
                {
                    b.HasOne("CelebrancyHQ.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });
#pragma warning restore 612, 618
        }
    }
}
